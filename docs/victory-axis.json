{"description":"","props":{"independentAxis":{"type":{"name":"bool"},"required":false,"description":"The independentAxis prop specifies whether the axis corresponds to the\nindependent variable (usually x). This prop is useful when composing axis\nwith other components to form a chart."},"style":{"type":{"name":"object"},"required":false,"description":"The style prop specifies styles for your chart. Victory Axis relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels.\nstyles for axis lines, gridlines, and ticks are scoped to separate props.\n@examples {width: 500, height: 300, margin: 50, axis: {stroke: \"#756f6a\"},\ngrid: {stroke: \"#c9c5bb\"}, ticks: {stroke: \"#756f6a\", padding: 5},\ntickLabels: {fontSize: 10, padding: 5}, axisLabels: {fontSize: 16, padding: 20}}"},"domain":{"type":{"name":"array"},"required":false,"description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n@exampes [-1, 1]"},"range":{"type":{"name":"arrayOf","value":{"name":"number"}},"required":false,"description":"The range prop describes the range of pixels your axis will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your axis area.\nIf this prop is not provided, a range will be calculated based on the height,\nor width, and the margin provided in the style prop, or in default styles. It is usually\na good idea to let the chart component calculate its own range.\n@exampes [0, 500]"},"orientation":{"type":{"name":"enum","value":[{"value":"\"top\"","computed":false},{"value":"\"bottom\"","computed":false},{"value":"\"left\"","computed":false},{"value":"\"right\"","computed":false}]},"required":false,"description":"The orientation prop specifies the position and orientation of your axis.","defaultValue":{"value":"\"bottom\"","computed":false}},"scale":{"type":{"name":"func"},"required":false,"description":"The scale prop determines which scales your axis should use. This prop should be\ngiven as a function,\n@exampes d3.time.scale()","defaultValue":{"value":"d3.scale.linear()","computed":true}},"tickCount":{"type":{"name":"number"},"required":false,"description":"The tickCount prop specifies how many ticks should be drawn on the axis if\nticksValues are not explicitly provided.","defaultValue":{"value":"5","computed":false}},"tickValues":{"type":{"name":"array"},"required":false,"description":"The tickValues prop explicity specifies which ticks values to draw on the axis.\n@examples [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},"tickFormat":{"type":{"name":"union","value":[{"name":"func"},{"name":"array"}]},"required":false,"description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue\n@examples d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},"label":{"type":{"name":"string"},"required":false,"description":"The label prop specifies the label for your axis"},"labelPadding":{"type":{"name":"number"},"required":false,"description":"The labelPadding prop specifies the padding in pixels for you axis label"},"offsetX":{"type":{"name":"number"},"required":false,"description":"This value describes how far from the \"edge\" of it's permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},"offsetY":{"type":{"name":"number"},"required":false,"description":"This value describes how far from the \"edge\" of it's permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},"crossAxis":{"type":{"name":"bool"},"required":false,"description":"This value determines whether or not to draw gridlines for an axis. Note: gridlines\nfor an axis are drawn perpendicularly from each axis starting at the axis ticks."},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryAxis with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the axis will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {line: {delay: 5, velocity: 10, onEnd: () => alert(\"woo!\")}}"}}}